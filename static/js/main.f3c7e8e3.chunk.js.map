{"version":3,"sources":["components/ErrorIndicator/earth.png","redux/actions/ActionTypes.js","redux/reducers/RandomCountryReducer.js","redux/reducers/ErrorBoundryReducer.js","redux/reducers/CountriesReducer.js","redux/reducers/RootReducer.js","components/ErrorIndicator/ErrorIndicator.js","services/RCApiService.js","redux/actions/Actions.js","components/ErrorBoundry/ErrorBoundry.js","components/Header/Header.js","components/Spinner/Spinner.js","components/RandomCountry/RandomCountry.js","components/ItemList/ItemList.js","components/ItemDetails/ItemDetails.js","components/ItemFilters/ItemFilters.js","components/ContentRow/ContentRow.js","components/Pages/AfricaPage.js","components/Pages/AmericasPage.js","components/Pages/AsiaPage.js","components/Pages/EuropePage.js","components/Pages/OceaniaPage.js","components/Pages/FavoriteCountriesPage.js","components/ItemSelect/ItemSelect.js","components/Pages/CountriesByLanguagePage.js","components/App/App.js","index.js"],"names":["module","exports","RANDOM_COUNTRY_LOADED","RANDOM_COUNTRY_ERROR","ERROR_BOUNDRY_HAS_ERROR","FETCH_COUNTRIES_START","FETCH_COUNTRIES_SUCCESS","FETCH_COUNTRIES_ERROR","FETCH_COUNTRY_START","FETCH_COUNTRY_SUCCESS","FETCH_COUNTRY_ERROR","RESET_COUNTRIES_DATA","ADD_COUNTRY_TO_FAVORITES","REMOVE_COUNTRY_FROM_FAVORITES","SET_SELECTED_COUNTRIES","FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS","initialState","country","loading","error","hasError","loadingCountries","loadingCountry","countries","filteredCountries","favoriteCountries","countryFilters","selectedCountryFilter","languageFilters","selectedlanguageFilter","combineReducers","randomCountry","state","action","type","payload","errorBoundry","favoriteCountriesArr","index","indexOf","splice","filterName","ErrorIndicator","className","src","icon","alt","RCApiService","_apiBase","_params","getResource","url","a","fetch","res","ok","Error","status","json","getRandomCountry","id","_transformCountry","getCountriesByRegion","region","result","map","getCountriesByLanguage","getFavoritesCountries","countriesList","getCountry","countryName","callingCodes","name","flag","alpha3Code","capital","population","subregion","currencies","languageName","languages","rcApiService","randomCountryError","err","fetchCountriesByRegion","dispatch","fetchCountriesStart","then","fetchCountriesSuccess","catch","fetchCountriesError","fetchCountriesByLanguageSuccess","forEach","language","push","resetCountriesData","filterCountryBySubregion","getState","filter","setSelectedCountryies","ErrorBoundry","this","props","setErrorBoundryState","children","Component","connect","Header","to","Spinner","role","RandomCountry","fetchRandomCountry","fetchInterval","setInterval","clearTimeout","hasData","errorMessage","spinner","content","CountryView","currency","key","symbol","Math","floor","random","addCountryToFavorites","countryCode","removeCountryFromFavorites","withRouter","onItemSelected","location","items","Toggle","as","Button","variant","eventKey","Collapse","Body","size","onClick","test","pathname","ItemDetails","updateItem","prevProps","itemName","fetchCountry","ItemFilters","filters","cls","value","ContentRow","top","leftSide","rightSide","AfricaPage","history","match","params","AmericasPage","AsiaPage","EuropePage","OceaniaPage","FavoriteCountriesPage","favoritesCountriesList","join","fetchFavoritesCountries","prevState","length","ItemSelect","filterCountryByLanguage","onChange","event","target","CountriesByLanguagePage","fetchCountriesByLanguage","App","path","exact","render","component","store","createStore","RootReducer","composeWithDevTools","applyMiddleware","ReduxThunk","app","ReactDOM","document","getElementById"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,mC,6VCA9BC,EAAwB,wBACxBC,EAAuB,uBACvBC,EAA0B,0BAC1BC,EAAwB,wBACxBC,EAA0B,0BAC1BC,EAAwB,wBACxBC,EAAsB,sBACtBC,EAAwB,wBACxBC,EAAsB,sBACtBC,EAAuB,uBACvBC,EAA2B,2BAC3BC,EAAgC,gCAChCC,EAAyB,yBACzBC,EAAsC,sC,yjBCXnD,IAAMC,EAAe,CACjBC,QAAS,GACTC,SAAS,EACTC,OAAO,GCHX,IAAMH,EAAe,CACjBI,UAAU,G,qkBCWd,IAAMJ,EAAe,CACjBK,kBAAkB,EAClBC,gBAAgB,EAChBH,OAAO,EACPF,QAAS,KACTM,UAAW,GACXC,kBAAmB,GACnBC,kBAAmB,GACnBC,eAAgB,GAChBC,sBAAuB,KACvBC,gBAAiB,GACjBC,uBAAwB,WCpBbC,gCAAgB,CAC3BC,cHEW,WAA6D,IAA/BC,EAA8B,uDAAtBhB,EAAciB,EAAQ,uCACvE,OAAQA,EAAOC,MACX,KAAKhC,EACD,OAAO,EAAP,GACO8B,EADP,CAEIf,QAASgB,EAAOE,QAChBjB,SAAS,EACTC,OAAO,IAEf,KAAKhB,EACD,OAAO,EAAP,GACO6B,EADP,CAEId,SAAS,EACTC,OAAO,IAEf,QACI,OAAOa,IGjBfI,aFDW,WAA4D,IAA/BJ,EAA8B,uDAAtBhB,EAChD,QADsE,wCACvDkB,MACX,KAAK9B,EACD,MAAO,CACHgB,UAAU,GAElB,QACI,OAAOY,IELfT,UDoBW,WAAyD,IAA/BS,EAA8B,uDAAtBhB,EAAciB,EAAQ,uCACnE,OAAQA,EAAOC,MACX,KAAK7B,EACD,OAAO,KACA2B,EADP,CAEIX,kBAAkB,EAClBF,OAAO,IAEf,KAAKb,EACD,OAAO,KACA0B,EADP,CAEIX,kBAAkB,EAClBF,OAAO,EACPI,UAAWU,EAAOE,QAClBX,kBAAmBS,EAAOE,QAC1BT,eAAgBO,EAAOP,iBAE/B,KAAKnB,EACD,OAAO,KACAyB,EADP,CAEIX,kBAAkB,EAClBF,OAAO,IAEf,KAAKR,EACD,OAAO,KACAqB,EADP,CAEIX,kBAAkB,EAClBC,gBAAgB,EAChBH,OAAO,EACPF,QAAS,KACTM,UAAW,GACXC,kBAAmB,GACnBE,eAAgB,GAChBC,sBAAuB,KACvBC,gBAAiB,KAEzB,KAAKhB,EACD,OAAO,KACAoB,EADP,CAEIP,kBAAkB,GAAD,mBAAMO,EAAMP,mBAAZ,CAA+BQ,EAAOE,YAE/D,KAAKtB,EACD,IAAMwB,EAAoB,YAAOL,EAAMP,mBACjCa,EAAQD,EAAqBE,QAAQN,EAAOE,SAIlD,OAFAE,EAAqBG,OAAOF,EAAO,GAE5B,KACAN,EADP,CAEIP,kBAAmBY,IAE3B,KAAK7B,EACD,OAAO,KACAwB,EADP,CAEIV,gBAAgB,EAChBH,OAAO,IAEf,KAAKV,EACD,OAAO,KACAuB,EADP,CAEIV,gBAAgB,EAChBH,OAAO,EACPF,QAASgB,EAAOE,UAExB,KAAKzB,EACD,OAAO,KACAsB,EADP,CAEIV,gBAAgB,EAChBH,OAAO,IAEf,KAAKL,EACD,OAAO,KACAkB,EADP,CAEIL,sBAAuBM,EAAOQ,WAC9BjB,kBAAmBS,EAAOE,UAElC,KAAKpB,EACD,OAAO,KACAiB,EADP,CAEIX,kBAAkB,EAClBF,OAAO,EACPI,UAAWU,EAAOE,QAClBX,kBAAmBS,EAAOE,QAC1BP,gBAAiBK,EAAOL,kBAEhC,QACI,OAAOI,M,4DEnGJU,G,MAXQ,WACnB,OACI,yBAAKC,UAAU,gCACX,yBAAKC,IAAKC,IAAMC,IAAI,eACpB,0BAAMH,UAAU,QAAhB,SACA,mEACA,4D,gCCVSI,E,iDACjBC,SAAW,2B,KACXC,QAAU,qG,KAEVC,Y,uCAAc,WAAMC,GAAN,eAAAC,EAAA,sEACQC,MAAM,GAAD,OAAI,EAAKL,UAAT,OAAoBG,IADjC,WACJG,EADI,QAGDC,GAHC,sBAIA,IAAIC,MAAJ,0BAA6BL,EAA7B,sBAA8CG,EAAIG,SAJlD,gCAOHH,EAAII,QAPD,2C,2DAUdC,iB,uCAAmB,WAAMC,GAAN,mBAAAR,EAAA,sEACS,EAAKF,YAAL,+BAAyCU,GAAzC,OAA8C,EAAKX,UAD5D,0CACRhC,EADQ,uBAER8B,EAAac,kBAAkB5C,IAFvB,2C,2DAKnB6C,qB,uCAAuB,WAAMC,GAAN,eAAAX,EAAA,sEACE,EAAKF,YAAL,0BAAoCa,GAApC,OAA6C,EAAKd,UADpD,cACbe,EADa,yBAEZA,EAAOC,IAAIlB,EAAac,oBAFZ,2C,2DAKvBK,uB,sBAAyB,4BAAAd,EAAA,sEACA,EAAKF,YAAL,sBAAgC,EAAKD,UADrC,cACfe,EADe,yBAEdA,GAFc,2C,KAKzBG,sB,uCAAwB,WAAMC,GAAN,eAAAhB,EAAA,sEACC,EAAKF,YAAL,+BAAyCkB,IAD1C,cACdJ,EADc,yBAEbA,EAAOC,IAAIlB,EAAac,oBAFX,2C,2DAKxBQ,W,uCAAa,WAAMC,GAAN,mBAAAlB,EAAA,sEACe,EAAKF,YAAL,wBAAkCoB,GAAlC,OAAgD,EAAKrB,UADpE,0CACFhC,EADE,uBAEF8B,EAAac,kBAAkB5C,IAF7B,2C,uDAlCI8B,EAuCVc,kBAAoB,SAAA5C,GACvB,MAAO,CACH2C,GAAI3C,EAAQsD,aAAa,GACzBC,KAAMvD,EAAQuD,KACdC,KAAMxD,EAAQwD,KACdC,WAAYzD,EAAQyD,WACpBC,QAAS1D,EAAQ0D,QACjBC,WAAY3D,EAAQ2D,WACpBC,UAAW5D,EAAQ4D,UACnBd,OAAQ9C,EAAQ8C,OAChBe,WAAY7D,EAAQ6D,WACpBC,aAAc9D,EAAQ+D,UAAU,GAAGR,OChC/C,IAAMS,EAAe,IAAIlC,EAqBlB,SAASmC,EAAoBC,GAChC,MAAO,CACHjD,KAAM/B,GAUP,SAASiF,EAAuBrB,GACnC,8CAAO,WAAMsB,GAAN,SAAAjC,EAAA,sDACHiC,EAASC,MAETL,EACKnB,qBAAqBC,GACrBwB,MAAK,SAAAjC,GAAG,OAAI+B,EAASG,GAAsBlC,OAC3CmC,OAAM,SAAAN,GAAG,OAAIE,EAASK,GAAoBP,OAN5C,2CAAP,mDAAM,GAqBH,SAASQ,EAAgCpE,GAC5C,IAAMK,EAAkB,GAUxB,OARAL,EAAUqE,SAAQ,SAAA3E,GACdA,EAAQ+D,UAAUY,SAAQ,SAACC,IACyB,IAA5CjE,EAAgBW,QAAQsD,EAASrB,OACjC5C,EAAgBkE,KAAKD,EAASrB,YAKnC,CACHtC,KAAMnB,EACNoB,QAASZ,EACTK,gBAAiBA,GAUlB,SAAS0D,KACZ,MAAO,CACHpD,KAAM7B,GAIP,SAASmF,GAAsBjE,GAClC,IAAMG,EAAiB,GAQvB,OANAH,EAAUqE,SAAQ,SAAA3E,IACqC,IAA/CS,EAAea,QAAQtB,EAAQ4D,YAC/BnD,EAAeoE,KAAK7E,EAAQ4D,cAI7B,CACH3C,KAAM5B,EACN6B,QAASZ,EACTG,eAAgBA,GAIjB,SAASgE,GAAoBP,GAChC,MAAO,CACHjD,KAAM3B,GAIP,SAASwF,KACZ,MAAO,CACH7D,KAAMvB,GA0DP,SAASqF,GAAyBvD,GACrC,OAAO,SAAC4C,EAAUY,GACd,IACMzE,EADQyE,IAAW1E,UACOA,UAAU2E,QAAO,SAACjF,GAAD,OAAaA,EAAQ4D,YAAcpC,KAEpF4C,EAID,SAA+B5C,EAAYlB,GAC9C,MAAO,CACHW,KAAMpB,EACNqB,QAASZ,EACTkB,WAAYA,GARH0D,CAAsB1D,EAAYjB,K,ICzL7C4E,G,4LAEEC,KAAKC,MAAMC,yB,+BAIX,OAAIF,KAAKC,MAAMlF,SACJ,kBAAC,EAAD,MAGJiF,KAAKC,MAAME,a,GAVCC,aA0BZC,oBAZf,SAAyB1E,GACrB,MAAO,CACHZ,SAAUY,EAAMI,aAAahB,aAIrC,SAA4BiE,GACxB,MAAO,CACHkB,qBAAsB,kBAAMlB,EDmBzB,CACHnD,KAAM9B,QChBCsG,CAA6CN,ICO7CO,GAnCA,WACX,OACI,yBAAKhE,UAAU,kDACX,kBAAC,IAAD,CAASA,UAAU,eAAeiE,GAAG,eAArC,aACA,yBAAKjE,UAAU,2BAA2BiB,GAAG,0BACzC,wBAAIjB,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWiE,GAAG,sBAAjC,WAEJ,wBAAIjE,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWiE,GAAG,wBAAjC,aAEJ,wBAAIjE,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWiE,GAAG,oBAAjC,SAEJ,wBAAIjE,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWiE,GAAG,sBAAjC,WAEJ,wBAAIjE,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWiE,GAAG,uBAAjC,aAGR,wBAAIjE,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWiE,GAAG,qCAAjC,0BAEJ,wBAAIjE,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWiE,GAAG,kCAAjC,2BCjBTC,I,MAVC,WACZ,OACI,yBAAKlE,UAAU,uCACX,yBAAKA,UAAU,8BAA8BmE,KAAK,UAC9C,0BAAMnE,UAAU,WAAhB,kBCAVoE,I,kMAEEV,KAAKC,MAAMU,qBACXX,KAAKY,cAAgBC,YAAYb,KAAKC,MAAMU,mBAAoB,O,6CAIhEG,aAAad,KAAKY,iB,+BAGZ,IAAD,EAC6BZ,KAAKC,MAAhCrF,EADF,EACEA,QAASC,EADX,EACWA,QAASC,EADpB,EACoBA,MACnBiG,IAAYlG,GAAWC,GACvBkG,EAAelG,EAAQ,kBAAC,EAAD,MAAoB,KAC3CmG,EAAUpG,EAAU,kBAAC,GAAD,MAAa,KACjCqG,EAAUH,EAAU,kBAAC,GAAD,CAAanG,QAASA,IAAa,KAE7D,OACI,yBAAK0B,UAAU,oCACX,yBAAKA,UAAU,aACV0E,EACAC,EACAC,Q,GAtBOd,cA6BtBe,GAAc,SAAC,GAAe,IAAdvG,EAAa,EAAbA,QACXuD,EAA8EvD,EAA9EuD,KAAME,EAAwEzD,EAAxEyD,WAAYC,EAA4D1D,EAA5D0D,QAASC,EAAmD3D,EAAnD2D,WAAYC,EAAuC5D,EAAvC4D,UAAWd,EAA4B9C,EAA5B8C,OAAQe,EAAoB7D,EAApB6D,WAAYL,EAAQxD,EAARwD,KAE7E,OACI,oCACI,yBAAK9B,UAAU,gBACVC,IAAK6B,EACL3B,IAAI,YACT,6BACI,4BAAK0B,EAAL,MAAcE,GACd,wBAAI/B,UAAU,+BACTmC,EAAWb,KAAI,SAACwD,EAASnF,GACtB,OAAQ,wBAAIK,UAAU,kBAAkB+E,IAAKpF,GACzC,0BAAMK,UAAU,QAAhB,cACA,8BAAO8E,EAASjD,KAAMiD,EAASE,OAAT,aAAwBF,EAASE,QAAW,UAG1E,wBAAIhF,UAAU,mBACV,0BAAMA,UAAU,QAAhB,aACA,8BAAOgC,IAEX,wBAAIhC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,gBACA,8BAAOiC,IAEX,wBAAIjC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,eACA,8BAAOkC,IAEX,wBAAIlC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,YACA,8BAAOoB,QAsBhB2C,oBAdf,SAAyB1E,GACrB,MAAO,CACHf,QAASe,EAAMD,cAAcd,QAC7BC,QAASc,EAAMD,cAAcb,QAC7BC,MAAOa,EAAMD,cAAcZ,UAInC,SAA4BkE,GACxB,MAAO,CACH2B,mBAAoB,kBAAM3B,EJjE3B,WACH,IACMzB,EADe,CAAC,KAAM,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,OAAQ,KAAM,MAAO,MAAO,KAAM,KAAM,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,KAAM,MAAO,MAAO,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,GAAI,KAAM,MAAO,GAAI,OAAQ,QAAS,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,IAAK,MAAO,OAAQ,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,MAAO,MAAO,MAAO,KAAM,MAAO,OAAQ,OAAQ,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,MAAO,MAAO,GAAI,MAAO,MAAO,MAAO,KAAM,MAAO,MAAO,KAAM,MAAO,OAAQ,MAAO,OAAQ,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,GAAI,MAAO,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,MAAO,KAAM,OAAQ,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,KAAM,MAAO,MAAO,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,KAAM,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,MAAO,OAAQ,MAAO,MAAO,MAAO,KAAM,IAAK,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAM,OAAQ,MAAO,MAAO,MAAO,MAAO,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,MAAO,OAAQ,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,KAAM,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,KAAM,IAAK,MAAO,MAAO,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,OAClqDgE,KAAKC,MAAsB,IAAhBD,KAAKE,WAExC,8CAAO,WAAMzC,GAAN,SAAAjC,EAAA,sDACH6B,EACKtB,iBAAiBC,GACjB2B,MAAK,SAAAjC,GAAG,OAAI+B,EAMd,CACHnD,KAAMhC,EACNiC,QAR8CmB,OACzCmC,OAAM,SAAAN,GAAG,OAAIE,EAASH,EAAmBC,OAJ3C,2CAAP,mDAAM,GI6DiC6B,QAI5BN,CAA6CK,I,8FCvB7CL,qBAdf,SAAyB1E,GACrB,MAAO,CACHT,UAAWS,EAAMT,UAAUC,kBAC3BN,QAASc,EAAMT,UAAUF,qBAIjC,SAA4BgE,GACxB,MAAO,CACH0C,sBAAuB,SAACC,GAAD,OAAiB3C,ELsEzC,SAA+B2C,GAClC,MAAO,CACH9F,KAAMtB,EACNuB,QAAS6F,GKzEwCD,CAAsBC,KACvEC,2BAA4B,SAACD,GAAD,OAAiB3C,EL4E9C,SAAoC2C,GACvC,MAAO,CACH9F,KAAMrB,EACNsB,QAAS6F,GK/E6CC,CAA2BD,QAI1EtB,CAA6CwB,aAvD3C,SAAC5B,GAAW,IAClB/E,EAAmG+E,EAAnG/E,UAAWL,EAAwFoF,EAAxFpF,QAASiH,EAA+E7B,EAA/E6B,eAAgBJ,EAA+DzB,EAA/DyB,sBAAuBE,EAAwC3B,EAAxC2B,2BAA4BG,EAAY9B,EAAZ8B,SAExFC,EAAQ9G,EAAU0C,KAAI,SAAChD,EAASqB,GAAW,IACtCkC,EAA2CvD,EAA3CuD,KAAMG,EAAqC1D,EAArC0D,QAASI,EAA4B9D,EAA5B8D,aAAcL,EAAczD,EAAdyD,WAEpC,OACI,kBAAC,KAAD,CAAMgD,IAAKlD,GACP,kBAAC,KAAKmC,OAAN,KACI,kBAAC,KAAU2B,OAAX,CAAkBC,GAAIC,KAAQC,QAAQ,OAAOC,SAAUpG,GAClDkC,IAGT,kBAAC,KAAUmE,SAAX,CAAoBD,SAAUpG,GAC1B,kBAAC,KAAKsG,KAAN,uBACoBjE,EADpB,gBAC0CI,EACtC,kBAAC,KAAD,CAAepC,UAAU,8BACrB,kBAAC,KAAD,CAAQ8F,QAAQ,UAAUI,KAAK,KAAKlG,UAAU,OAAOmG,QAAS,kBAAMX,EAAe3D,KAAnF,aACC,sBAAsBuE,KAAKX,EAASY,UACjC,kBAAC,KAAD,CAAQP,QAAQ,SAASI,KAAK,KAAKlG,UAAU,OAAOmG,QAAS,kBAAMb,EAA2BvD,KAA9F,yBAEA,kBAAC,KAAD,CAAQ+D,QAAQ,UAAUI,KAAK,KAAKlG,UAAU,OAAOmG,QAAS,kBAAMf,EAAsBrD,KAA1F,2BAS5B,OAAIxD,EACO,kBAAC,GAAD,MAIP,kBAAC,KAAD,KACKmH,OCxCPY,I,kMAEE5C,KAAK6C,e,yCAEUC,GACX9C,KAAKC,MAAM8C,WAAaD,EAAUC,UAClC/C,KAAK6C,e,mCAIC,IACHE,EAAY/C,KAAKC,MAAjB8C,SAEFA,GAEL/C,KAAKC,MAAM+C,aAAaD,K,+BAGlB,IAAD,EACsB/C,KAAKC,MAAzBrF,EADF,EACEA,QAASC,EADX,EACWA,QAEhB,IAAKD,EACD,OAAO,0BAAM0B,UAAU,uBAAhB,gCAGX,GAAIzB,EACA,OAAO,kBAAC,GAAD,MARN,IAWEsD,EAAkEvD,EAAlEuD,KAAMG,EAA4D1D,EAA5D0D,QAASC,EAAmD3D,EAAnD2D,WAAYC,EAAuC5D,EAAvC4D,UAAWd,EAA4B9C,EAA5B8C,OAAQe,EAAoB7D,EAApB6D,WAAYL,EAAQxD,EAARwD,KAEjE,OACI,yBAAK9B,UAAU,qBACX,yBAAKA,UAAU,aACVC,IAAK6B,EACL3B,IAAI,SAET,yBAAKH,UAAU,aACX,4BAAK6B,GACL,wBAAI7B,UAAU,+BACTmC,EAAWb,KAAI,SAACwD,EAASnF,GACtB,OACI,wBAAIK,UAAU,kBAAkB+E,IAAKpF,GACrC,0BAAMK,UAAU,QAAhB,cACA,8BAAO8E,EAASjD,KAAMiD,EAASE,OAAT,aAAwBF,EAASE,QAAW,UAI1E,wBAAIhF,UAAU,mBACV,0BAAMA,UAAU,QAAhB,aACA,8BAAOgC,IAEX,wBAAIhC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,gBACA,8BAAOiC,IAEX,wBAAIjC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,eACA,8BAAOkC,IAEX,wBAAIlC,UAAU,mBACV,0BAAMA,UAAU,QAAhB,YACA,8BAAOoB,W,GA9DT0C,cAqFXC,qBAdf,SAAyB1E,GACrB,MAAO,CACHf,QAASe,EAAMT,UAAUN,QACzBC,QAASc,EAAMT,UAAUD,eACzBH,MAAOa,EAAMT,UAAUJ,UAI/B,SAA4BkE,GACxB,MAAO,CACHgE,aAAc,SAACpI,GAAD,OAAaoE,GNmENf,EMnE4BrD,ENoErD,uCAAO,WAAMoE,GAAN,SAAAjC,EAAA,sDACHiC,EAUG,CACHnD,KAAM1B,IATNyE,EACKZ,WAAWC,GACXiB,MAAK,SAAAjC,GAAG,OAAI+B,EAYd,CACHnD,KAAMzB,EACN0B,QAd8CmB,OACzCmC,OAAM,SAAAN,GAAG,OAAIE,EAkBf,CACHnD,KAAMxB,OAzBH,2CAAP,mDAAM,KADH,IAAsB4D,MM/DdoC,CAA6CuC,ICtFtDK,I,uLACQ,IAAD,EACqEjD,KAAKC,MAAxE5E,EADF,EACEA,eAAgBC,EADlB,EACkBA,sBAAuBqE,EADzC,EACyCA,yBAExCuD,EAAU7H,EAAeuC,KAAI,SAACiC,GAChC,IAAMsD,EAAMtD,IAAWvE,EAAwB,WAAa,mBAE5D,OACI,4BACI+F,IAAKxB,EACLhE,KAAK,SACLuH,MAAOvD,EACPvD,UAAS,cAAS6G,GAClBV,QAAS,kBAAM9C,EAAyBE,KAEvCA,MAKb,OACI,yBAAKvD,UAAU,kBACV4G,O,GAtBS9C,cAyCXC,qBAbf,SAAyB1E,GACrB,MAAO,CACHN,eAAgBM,EAAMT,UAAUG,eAChCC,sBAAuBK,EAAMT,UAAUI,0BAI/C,SAA4B0D,GACxB,MAAO,CACHW,yBAA0B,SAACvD,GAAD,OAAgB4C,EAASW,GAAyBvD,QAIrEiE,CAA6CwB,YAAWoB,KC3BxDI,GAlBI,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAChC,OACI,yBAAKlH,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,aACVgH,GAEL,yBAAKhH,UAAU,YACViH,GAEL,yBAAKjH,UAAU,YACVkH,MCLfC,G,4LAGEzD,KAAKC,MAAMlB,uBADI,Y,6CAKfiB,KAAKC,MAAMP,uB,+BAGL,IAAD,EACoBM,KAAKC,MAAvByD,EADF,EACEA,QACAvF,EAFF,EACWwF,MACKC,OAAdzF,KAEP,OACI,kBAAC,GAAD,CACImF,IAAK,kBAAC,GAAD,MACLC,SAAU,kBAAC,GAAD,CAAUzB,eAAgB,SAAC3D,GAAD,OAAUuF,EAAQjE,KAAKtB,MAC3DqF,UAAW,kBAAC,GAAD,CAAaT,SAAU5E,U,GAlBzBiC,aAmCVC,qBAXf,SAAyB1E,GACrB,OAAOA,KAGX,SAA4BqD,GACxB,MAAO,CACHD,uBAAwB,SAACrB,GAAD,OAAYsB,EAASD,EAAuBrB,KACpEgC,mBAAoB,kBAAMV,EAASU,UAI5BW,CAA6CoD,ICnCtDI,G,4LAGE7D,KAAKC,MAAMlB,uBADI,c,6CAKfiB,KAAKC,MAAMP,uB,+BAGL,IAAD,EACoBM,KAAKC,MAAvByD,EADF,EACEA,QACAvF,EAFF,EACWwF,MACKC,OAAdzF,KAEP,OACI,kBAAC,GAAD,CACImF,IAAK,kBAAC,GAAD,MACLC,SAAU,kBAAC,GAAD,CAAUzB,eAAgB,SAAC3D,GAAD,OAAUuF,EAAQjE,KAAKtB,MAC3DqF,UAAW,kBAAC,GAAD,CAAaT,SAAU5E,U,GAlBvBiC,aAmCZC,qBAXf,SAAyB1E,GACrB,OAAOA,KAGX,SAA4BqD,GACxB,MAAO,CACHD,uBAAwB,SAACrB,GAAD,OAAYsB,EAASD,EAAuBrB,KACpEgC,mBAAoB,kBAAMV,EAASU,UAI5BW,CAA6CwD,ICnCtDC,G,4LAGE9D,KAAKC,MAAMlB,uBADI,U,6CAKfiB,KAAKC,MAAMP,uB,+BAGL,IAAD,EACoBM,KAAKC,MAAvByD,EADF,EACEA,QACAvF,EAFF,EACWwF,MACKC,OAAdzF,KAEP,OACI,kBAAC,GAAD,CACImF,IAAK,kBAAC,GAAD,MACLC,SAAU,kBAAC,GAAD,CAAUzB,eAAgB,SAAC3D,GAAD,OAAUuF,EAAQjE,KAAKtB,MAC3DqF,UAAW,kBAAC,GAAD,CAAaT,SAAU5E,U,GAlB3BiC,aAmCRC,qBAXf,SAAyB1E,GACrB,OAAOA,KAGX,SAA4BqD,GACxB,MAAO,CACHD,uBAAwB,SAACrB,GAAD,OAAYsB,EAASD,EAAuBrB,KACpEgC,mBAAoB,kBAAMV,EAASU,UAI5BW,CAA6CyD,ICnCtDC,G,4LAGE/D,KAAKC,MAAMlB,uBADI,Y,6CAKfiB,KAAKC,MAAMP,uB,+BAGL,IAAD,EACoBM,KAAKC,MAAvByD,EADF,EACEA,QACAvF,EAFF,EACWwF,MACKC,OAAdzF,KAEP,OACI,kBAAC,GAAD,CACImF,IAAK,kBAAC,GAAD,MACLC,SAAU,kBAAC,GAAD,CAAUzB,eAAgB,SAAC3D,GAAD,OAAUuF,EAAQjE,KAAKtB,MAC3DqF,UAAW,kBAAC,GAAD,CAAaT,SAAU5E,U,GAlBzBiC,aAmCVC,qBAXf,SAAyB1E,GACrB,OAAOA,KAGX,SAA4BqD,GACxB,MAAO,CACHD,uBAAwB,SAACrB,GAAD,OAAYsB,EAASD,EAAuBrB,KACpEgC,mBAAoB,kBAAMV,EAASU,UAI5BW,CAA6C0D,ICnCtDC,G,4LAGEhE,KAAKC,MAAMlB,uBADI,a,6CAKfiB,KAAKC,MAAMP,uB,+BAGL,IAAD,EACoBM,KAAKC,MAAvByD,EADF,EACEA,QACAvF,EAFF,EACWwF,MACKC,OAAdzF,KAEP,OACI,kBAAC,GAAD,CACImF,IAAK,kBAAC,GAAD,MACLC,SAAU,kBAAC,GAAD,CAAUzB,eAAgB,SAAC3D,GAAD,OAAUuF,EAAQjE,KAAKtB,MAC3DqF,UAAW,kBAAC,GAAD,CAAaT,SAAU5E,U,GAlBxBiC,aAmCXC,qBAXf,SAAyB1E,GACrB,OAAOA,KAGX,SAA4BqD,GACxB,MAAO,CACHD,uBAAwB,SAACrB,GAAD,OAAYsB,EAASD,EAAuBrB,KACpEgC,mBAAoB,kBAAMV,EAASU,UAI5BW,CAA6C2D,ICpCtDC,G,4LAEE,IAAMC,EAAyBlE,KAAKC,MAAM7E,kBAAkB+I,KAAK,KACjEnE,KAAKC,MAAMmE,wBAAwBF,K,yCAGpBG,GACf,GAAIA,EAAUjJ,kBAAkBkJ,SAAWtE,KAAKC,MAAM7E,kBAAkBkJ,OAAQ,CAC5E,IAAMJ,EAAyBlE,KAAKC,MAAM7E,kBAAkB+I,KAAK,KACjEnE,KAAKC,MAAMmE,wBAAwBF,M,6CAKvClE,KAAKC,MAAMP,uB,+BAIX,IAAKM,KAAKC,MAAM7E,kBAAkBkJ,OAC9B,OACI,yBAAKhI,UAAU,uCAAuCmE,KAAK,SAA3D,qFAHH,MASoBT,KAAKC,MAAvByD,EATF,EASEA,QACAvF,EAVF,EASWwF,MACKC,OAAdzF,KAEP,OACI,kBAAC,GAAD,CACIoF,SAAU,kBAAC,GAAD,CAAUzB,eAAgB,SAAC3D,GAAD,OAAUuF,EAAQjE,KAAKtB,MAC3DqF,UAAW,kBAAC,GAAD,CAAaT,SAAU5E,U,GAhCdiC,aAmDrBC,qBAbf,SAAyB1E,GACrB,MAAO,CACHP,kBAAmBO,EAAMT,UAAUE,sBAI3C,SAA4B4D,GACxB,MAAO,CACHoF,wBAAyB,SAAC1G,GAAD,OAAYsB,Gd2FLjB,Ec3FsCL,Ed4F1E,uCAAO,WAAMsB,GAAN,SAAAjC,EAAA,sDACHiC,EAASC,MAETL,EACKd,sBAAsBC,GACtBmB,MAAK,SAAAjC,GAAG,OAAI+B,EAASG,GAAsBlC,OAC3CmC,OAAM,SAAAN,GAAG,OAAIE,EAASK,SANxB,2CAAP,mDAAM,KADH,IAAiCtB,Gc1FhC2B,mBAAoB,kBAAMV,EAASU,UAI5BW,CAA6C4D,ICrDtDM,I,uLACQ,IAAD,EACsEvE,KAAKC,MAAzE1E,EADF,EACEA,gBAAiBC,EADnB,EACmBA,uBAAwBgJ,EAD3C,EAC2CA,wBAE1CtB,EAAU3H,EAAgBqC,KAAI,SAACiC,EAAQ5D,GACzC,OACI,4BACIoF,IAAKxB,EACLuD,MAAOvD,GAENA,MAKb,OACI,8BACI,yBAAKvD,UAAU,wBACX,4BAAQA,UAAU,eAAeiB,GAAG,cAAc6F,MAAO5H,EAAwBiJ,SAAU,SAACC,GAAD,OAAWF,EAAwBE,EAAMC,OAAOvB,SACtIF,S,GAnBA9C,cAwCVC,qBAbf,SAAyB1E,GACrB,MAAO,CACHJ,gBAAiBI,EAAMT,UAAUK,gBACjCC,uBAAwBG,EAAMT,UAAUM,2BAIhD,SAA4BwD,GACxB,MAAO,CACHwF,wBAAyB,SAACpI,GAAD,OAAgB4C,EfmDtC,CACHnD,KAAM,gCehDCwE,CAA6CkE,ICrCtDK,G,4LAGE5E,KAAKC,MAAM4E,yBADM,Q,6CAKjB7E,KAAKC,MAAMP,uB,+BAGL,IAAD,EACoBM,KAAKC,MAAvByD,EADF,EACEA,QACAvF,EAFF,EACWwF,MACKC,OAAdzF,KAEP,OACI,kBAAC,GAAD,CACImF,IAAK,kBAAC,GAAD,MACLC,SAAU,kBAAC,GAAD,CAAUzB,eAAgB,SAAC3D,GAAD,OAAUuF,EAAQjE,KAAKtB,MAC3DqF,UAAW,kBAAC,GAAD,CAAaT,SAAU5E,U,GAlBZiC,aAmCvBC,qBAXf,SAAyB1E,GACrB,OAAOA,KAGX,SAA4BqD,GACxB,MAAO,CACH6F,yBAA0B,SAACrF,GAAD,OAAcR,EhByB5C,uCAAO,WAAMA,GAAN,SAAAjC,EAAA,sDACHiC,EAASC,MAETL,EACKf,yBACAqB,MAAK,SAAAjC,GAAG,OAAI+B,EAASM,EAAgCrC,OACrDmC,OAAM,SAAAN,GAAG,OAAIE,EAASK,SANxB,2CAAP,mDAAM,KgBxBFK,mBAAoB,kBAAMV,EAASU,UAI5BW,CAA6CuE,ICX7CE,I,MAxBH,WACR,OACE,oCACI,kBAAC,GAAD,KACI,kBAAC,IAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,cAAcC,OAAK,EAACC,OAAQ,kBAAM,wBAAI3I,UAAU,6BAAd,uCAC9C,kBAAC,IAAD,CAAOyI,KAAK,2BAA2BG,UAAWzB,KAClD,kBAAC,IAAD,CAAOsB,KAAK,6BAA6BG,UAAWrB,KACpD,kBAAC,IAAD,CAAOkB,KAAK,yBAAyBG,UAAWpB,KAChD,kBAAC,IAAD,CAAOiB,KAAK,2BAA2BG,UAAWnB,KAClD,kBAAC,IAAD,CAAOgB,KAAK,4BAA4BG,UAAWlB,KACnD,kBAAC,IAAD,CAAOe,KAAK,0CAA0CG,UAAWN,KACjE,kBAAC,IAAD,CAAOG,KAAK,uCAAuCG,UAAWjB,KAC9D,kBAAC,IAAD,CAAOgB,OAAQ,kBAAM,wBAAI3I,UAAU,4BAAd,MAA4C,6BAA5C,2BCbrC6I,I,MAAQC,sBAAYC,EAAaC,8BACnCC,0BAAgBC,QAGdC,GACF,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,GAAD,QAKZO,IAAST,OAAOQ,GAAKE,SAASC,eAAe,gB","file":"static/js/main.f3c7e8e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth.356a221d.png\";","export const RANDOM_COUNTRY_LOADED = 'RANDOM_COUNTRY_LOADED';\r\nexport const RANDOM_COUNTRY_ERROR = 'RANDOM_COUNTRY_ERROR';\r\nexport const ERROR_BOUNDRY_HAS_ERROR = 'ERROR_BOUNDRY_HAS_ERROR';\r\nexport const FETCH_COUNTRIES_START = 'FETCH_COUNTRIES_START';\r\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS';\r\nexport const FETCH_COUNTRIES_ERROR = 'FETCH_COUNTRIES_ERROR';\r\nexport const FETCH_COUNTRY_START = 'FETCH_COUNTRY_START';\r\nexport const FETCH_COUNTRY_SUCCESS = 'FETCH_COUNTRY_SUCCESS';\r\nexport const FETCH_COUNTRY_ERROR = 'FETCH_COUNTRY_ERROR';\r\nexport const RESET_COUNTRIES_DATA = 'RESET_COUNTRIES_DATA';\r\nexport const ADD_COUNTRY_TO_FAVORITES = 'ADD_COUNTRY_TO_FAVORITES';\r\nexport const REMOVE_COUNTRY_FROM_FAVORITES = 'REMOVE_COUNTRY_FROM_FAVORITES';\r\nexport const SET_SELECTED_COUNTRIES = 'SET_SELECTED_COUNTRIES';\r\nexport const FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS = 'FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS';\r\n","import {RANDOM_COUNTRY_LOADED, RANDOM_COUNTRY_ERROR} from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    country: {},\r\n    loading: true,\r\n    error: false\r\n};\r\n\r\nexport default function randomCountryReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case RANDOM_COUNTRY_LOADED:\r\n            return {\r\n                ...state,\r\n                country: action.payload,\r\n                loading: false,\r\n                error: false\r\n            };\r\n        case RANDOM_COUNTRY_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {ERROR_BOUNDRY_HAS_ERROR} from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    hasError: false\r\n};\r\n\r\nexport default function errorBoundryReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ERROR_BOUNDRY_HAS_ERROR:\r\n            return {\r\n                hasError: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    FETCH_COUNTRIES_START,\r\n    FETCH_COUNTRIES_SUCCESS,\r\n    FETCH_COUNTRIES_ERROR,\r\n    RESET_COUNTRIES_DATA,\r\n    ADD_COUNTRY_TO_FAVORITES,\r\n    REMOVE_COUNTRY_FROM_FAVORITES,\r\n    FETCH_COUNTRY_START,\r\n    FETCH_COUNTRY_SUCCESS,\r\n    FETCH_COUNTRY_ERROR,\r\n    SET_SELECTED_COUNTRIES,\r\n    FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS\r\n} from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    loadingCountries: true,\r\n    loadingCountry: true,\r\n    error: false,\r\n    country: null,\r\n    countries: [],\r\n    filteredCountries: [],\r\n    favoriteCountries: [],\r\n    countryFilters: [],\r\n    selectedCountryFilter: null,\r\n    languageFilters: [],\r\n    selectedlanguageFilter: 'English'\r\n};\r\n\r\nexport default function countriesReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_COUNTRIES_START:\r\n            return {\r\n                ...state,\r\n                loadingCountries: true,\r\n                error: false\r\n            };\r\n        case FETCH_COUNTRIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingCountries: false,\r\n                error: false,\r\n                countries: action.payload,\r\n                filteredCountries: action.payload,\r\n                countryFilters: action.countryFilters\r\n            };\r\n        case FETCH_COUNTRIES_ERROR:\r\n            return {\r\n                ...state,\r\n                loadingCountries: false,\r\n                error: true\r\n            };\r\n        case RESET_COUNTRIES_DATA:\r\n            return {\r\n                ...state,\r\n                loadingCountries: true,\r\n                loadingCountry: true,\r\n                error: false,\r\n                country: null,\r\n                countries: [],\r\n                filteredCountries: [],\r\n                countryFilters: [],\r\n                selectedCountryFilter: null,\r\n                languageFilters: []\r\n            };\r\n        case ADD_COUNTRY_TO_FAVORITES:\r\n            return {\r\n                ...state,\r\n                favoriteCountries: [...state.favoriteCountries, action.payload]\r\n            };\r\n        case REMOVE_COUNTRY_FROM_FAVORITES:\r\n            const favoriteCountriesArr = [...state.favoriteCountries],\r\n                  index = favoriteCountriesArr.indexOf(action.payload);\r\n\r\n            favoriteCountriesArr.splice(index, 1);\r\n\r\n            return {\r\n                ...state,\r\n                favoriteCountries: favoriteCountriesArr\r\n            };\r\n        case FETCH_COUNTRY_START:\r\n            return {\r\n                ...state,\r\n                loadingCountry: true,\r\n                error: false\r\n            };\r\n        case FETCH_COUNTRY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingCountry: false,\r\n                error: false,\r\n                country: action.payload\r\n            };\r\n        case FETCH_COUNTRY_ERROR:\r\n            return {\r\n                ...state,\r\n                loadingCountry: false,\r\n                error: true\r\n            };\r\n        case SET_SELECTED_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                selectedCountryFilter: action.filterName,\r\n                filteredCountries: action.payload\r\n            };\r\n        case FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingCountries: false,\r\n                error: false,\r\n                countries: action.payload,\r\n                filteredCountries: action.payload,\r\n                languageFilters: action.languageFilters\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport randomCountryReducer from './RandomCountryReducer';\r\nimport errorBoundryReducer from './ErrorBoundryReducer';\r\nimport countriesReducer from \"./CountriesReducer\";\r\n\r\nexport default combineReducers({\r\n    randomCountry: randomCountryReducer,\r\n    errorBoundry: errorBoundryReducer,\r\n    countries: countriesReducer\r\n});","import React from 'react';\r\nimport icon from './earth.png';\r\nimport './ErrorIndicator.scss'\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator text-primary\">\r\n            <img src={icon} alt=\"error icon\"/>\r\n            <span className=\"boom\">BOOM!</span>\r\n            <span>something has gone terribly wrong</span>\r\n            <span>(but we already fix it)</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;\r\n","export default class RCApiService {\r\n    _apiBase = 'https://restcountries.eu';\r\n    _params = '?fields=name;flag;callingCodes;alpha3Code;capital;population;subregion;region;currencies;languages';\r\n\r\n    getResource = async url => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, received ${res.status}`)\r\n        }\r\n\r\n        return res.json();\r\n    };\r\n\r\n    getRandomCountry = async id => {\r\n        const [country] = await this.getResource(`/rest/v2/callingcode/${id}${this._params}`);\r\n        return RCApiService._transformCountry(country);\r\n    };\r\n\r\n    getCountriesByRegion = async region => {\r\n        const result = await this.getResource(`/rest/v2/region/${region}${this._params}`);\r\n        return result.map(RCApiService._transformCountry);\r\n    };\r\n\r\n    getCountriesByLanguage = async () => {\r\n        const result = await this.getResource(`/rest/v2/all${this._params}`);\r\n        return result;\r\n    };\r\n\r\n    getFavoritesCountries = async countriesList => {\r\n        const result = await this.getResource(`/rest/v2/alpha?codes=${countriesList}`);\r\n        return result.map(RCApiService._transformCountry);\r\n    };\r\n\r\n    getCountry = async countryName => {\r\n        const [country] = await this.getResource(`/rest/v2/name/${countryName}${this._params}`);\r\n        return RCApiService._transformCountry(country);\r\n    };\r\n\r\n    static _transformCountry = country => {\r\n        return {\r\n            id: country.callingCodes[0],\r\n            name: country.name,\r\n            flag: country.flag,\r\n            alpha3Code: country.alpha3Code,\r\n            capital: country.capital,\r\n            population: country.population,\r\n            subregion: country.subregion,\r\n            region: country.region,\r\n            currencies: country.currencies,\r\n            languageName: country.languages[0].name\r\n        }\r\n    };\r\n}","import RCApiService from '../../services/RCApiService';\r\nimport {\r\n    RANDOM_COUNTRY_LOADED,\r\n    RANDOM_COUNTRY_ERROR,\r\n    ERROR_BOUNDRY_HAS_ERROR,\r\n    FETCH_COUNTRIES_START,\r\n    FETCH_COUNTRIES_SUCCESS,\r\n    FETCH_COUNTRIES_ERROR,\r\n    RESET_COUNTRIES_DATA,\r\n    ADD_COUNTRY_TO_FAVORITES,\r\n    REMOVE_COUNTRY_FROM_FAVORITES,\r\n    FETCH_COUNTRY_START,\r\n    FETCH_COUNTRY_SUCCESS,\r\n    FETCH_COUNTRY_ERROR,\r\n    SET_SELECTED_COUNTRIES,\r\n    FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS\r\n} from '../actions/ActionTypes';\r\n\r\nconst rcApiService = new RCApiService();\r\n\r\nexport function fetchRandomCountry() {\r\n    const callingCodes = [\"93\", \"358\", \"355\", \"213\", \"1684\", \"376\", \"244\", \"1264\", \"672\", \"1268\", \"54\", \"374\", \"297\", \"61\", \"43\", \"994\", \"1242\", \"973\", \"880\", \"1246\", \"375\", \"32\", \"501\", \"229\", \"1441\", \"975\", \"591\", \"5997\", \"387\", \"267\", \"\", \"55\", \"246\", \"\", \"1284\", \"1 340\", \"673\", \"359\", \"226\", \"257\", \"855\", \"237\", \"1\", \"238\", \"1345\", \"236\", \"235\", \"56\", \"86\", \"61\", \"61\", \"57\", \"269\", \"242\", \"243\", \"682\", \"506\", \"385\", \"53\", \"599\", \"357\", \"420\", \"45\", \"253\", \"1767\", \"1809\", \"593\", \"20\", \"503\", \"240\", \"291\", \"372\", \"251\", \"500\", \"298\", \"679\", \"358\", \"33\", \"594\", \"689\", \"\", \"241\", \"220\", \"995\", \"49\", \"233\", \"350\", \"30\", \"299\", \"1473\", \"590\", \"1671\", \"502\", \"44\", \"224\", \"245\", \"592\", \"509\", \"\", \"379\", \"504\", \"852\", \"36\", \"354\", \"91\", \"62\", \"225\", \"98\", \"964\", \"353\", \"44\", \"972\", \"39\", \"1876\", \"81\", \"44\", \"962\", \"76\", \"254\", \"686\", \"965\", \"996\", \"856\", \"371\", \"961\", \"266\", \"231\", \"218\", \"423\", \"370\", \"352\", \"853\", \"389\", \"261\", \"265\", \"60\", \"960\", \"223\", \"356\", \"692\", \"596\", \"222\", \"230\", \"262\", \"52\", \"691\", \"373\", \"377\", \"976\", \"382\", \"1664\", \"212\", \"258\", \"95\", \"264\", \"674\", \"977\", \"31\", \"687\", \"64\", \"505\", \"227\", \"234\", \"683\", \"672\", \"850\", \"1670\", \"47\", \"968\", \"92\", \"680\", \"970\", \"507\", \"675\", \"595\", \"51\", \"63\", \"64\", \"48\", \"351\", \"1787\", \"974\", \"383\", \"262\", \"40\", \"7\", \"250\", \"590\", \"290\", \"1869\", \"1758\", \"590\", \"508\", \"1784\", \"685\", \"378\", \"239\", \"966\", \"221\", \"381\", \"248\", \"232\", \"65\", \"1721\", \"421\", \"386\", \"677\", \"252\", \"27\", \"500\", \"82\", \"211\", \"34\", \"94\", \"249\", \"597\", \"4779\", \"268\", \"46\", \"41\", \"963\", \"886\", \"992\", \"255\", \"66\", \"670\", \"228\", \"690\", \"676\", \"1868\", \"216\", \"90\", \"993\", \"1649\", \"688\", \"256\", \"380\", \"971\", \"44\", \"1\", \"598\", \"998\", \"678\", \"58\", \"84\", \"681\", \"212\", \"967\", \"260\", \"263\"]\r\n    const id = callingCodes[Math.floor(Math.random() * 250)];\r\n\r\n    return async dispatch => {\r\n        rcApiService\r\n            .getRandomCountry(id)\r\n            .then(res => dispatch(randomCountryLoaded(res)))\r\n            .catch(err => dispatch(randomCountryError(err)));\r\n    }\r\n}\r\n\r\nexport function randomCountryLoaded (country) {\r\n    return {\r\n        type: RANDOM_COUNTRY_LOADED,\r\n        payload: country\r\n    }\r\n}\r\n\r\nexport function randomCountryError (err) {\r\n    return {\r\n        type: RANDOM_COUNTRY_ERROR\r\n    }\r\n}\r\n\r\nexport function setErrorBoundryState() {\r\n    return {\r\n        type: ERROR_BOUNDRY_HAS_ERROR\r\n    }\r\n}\r\n\r\nexport function fetchCountriesByRegion(region) {\r\n    return async dispatch => {\r\n        dispatch(fetchCountriesStart());\r\n\r\n        rcApiService\r\n            .getCountriesByRegion(region)\r\n            .then(res => dispatch(fetchCountriesSuccess(res)))\r\n            .catch(err => dispatch(fetchCountriesError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountriesByLanguage() {\r\n    return async dispatch => {\r\n        dispatch(fetchCountriesStart());\r\n\r\n        rcApiService\r\n            .getCountriesByLanguage()\r\n            .then(res => dispatch(fetchCountriesByLanguageSuccess(res)))\r\n            .catch(err => dispatch(fetchCountriesError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountriesByLanguageSuccess(countries) {\r\n    const languageFilters = [];\r\n\r\n    countries.forEach(country => {\r\n        country.languages.forEach((language) => {\r\n            if (languageFilters.indexOf(language.name) === -1 ) {\r\n                languageFilters.push(language.name)\r\n            }\r\n        });\r\n    });\r\n\r\n    return {\r\n        type: FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS,\r\n        payload: countries,\r\n        languageFilters: languageFilters\r\n    }\r\n}\r\n\r\nexport function filterCountryByLanguage(languageName) {\r\n    return {\r\n        type: 'filterCountryByLanguage'\r\n    }\r\n}\r\n\r\nexport function fetchCountriesStart() {\r\n    return {\r\n        type: FETCH_COUNTRIES_START\r\n    }\r\n}\r\n\r\nexport function fetchCountriesSuccess(countries) {\r\n    const countryFilters = [];\r\n\r\n    countries.forEach(country => {\r\n        if (countryFilters.indexOf(country.subregion) === -1 ) {\r\n            countryFilters.push(country.subregion);\r\n        }\r\n    });\r\n\r\n    return {\r\n        type: FETCH_COUNTRIES_SUCCESS,\r\n        payload: countries,\r\n        countryFilters: countryFilters\r\n    }\r\n}\r\n\r\nexport function fetchCountriesError(err) {\r\n    return {\r\n        type: FETCH_COUNTRIES_ERROR\r\n    }\r\n}\r\n\r\nexport function resetCountriesData() {\r\n    return {\r\n        type: RESET_COUNTRIES_DATA\r\n    }\r\n}\r\n\r\nexport function addCountryToFavorites(countryCode) {\r\n    return {\r\n        type: ADD_COUNTRY_TO_FAVORITES,\r\n        payload: countryCode\r\n    }\r\n}\r\n\r\nexport function removeCountryFromFavorites(countryCode) {\r\n    return {\r\n        type: REMOVE_COUNTRY_FROM_FAVORITES,\r\n        payload: countryCode\r\n    }\r\n}\r\nexport function fetchFavoritesCountries(countriesList) {\r\n    return async dispatch => {\r\n        dispatch(fetchCountriesStart());\r\n\r\n        rcApiService\r\n            .getFavoritesCountries(countriesList)\r\n            .then(res => dispatch(fetchCountriesSuccess(res)))\r\n            .catch(err => dispatch(fetchCountriesError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountry(countryName) {\r\n    return async dispatch => {\r\n        dispatch(fetchCountryStart());\r\n\r\n        rcApiService\r\n            .getCountry(countryName)\r\n            .then(res => dispatch(fetchCountrySuccess(res)))\r\n            .catch(err => dispatch(fetchCountryError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountryStart() {\r\n    return {\r\n        type: FETCH_COUNTRY_START\r\n    }\r\n}\r\n\r\nexport function fetchCountrySuccess(country) {\r\n    return {\r\n        type: FETCH_COUNTRY_SUCCESS,\r\n        payload: country\r\n    }\r\n}\r\n\r\nexport function fetchCountryError(err) {\r\n    return {\r\n        type: FETCH_COUNTRY_ERROR\r\n    }\r\n}\r\n\r\nexport function filterCountryBySubregion(filterName) {\r\n    return (dispatch, getState) => {\r\n        const state = getState().countries;\r\n        const filteredCountries = state.countries.filter((country) => country.subregion === filterName);\r\n\r\n        dispatch(setSelectedCountryies(filterName, filteredCountries));\r\n    }\r\n}\r\n\r\nexport function setSelectedCountryies(filterName, countries) {\r\n    return {\r\n        type: SET_SELECTED_COUNTRIES,\r\n        payload: countries,\r\n        filterName: filterName\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport ErrorIndicator from '../ErrorIndicator/ErrorIndicator';\r\nimport {setErrorBoundryState} from \"../../redux/actions/Actions\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    componentDidCatch() {\r\n        this.props.setErrorBoundryState();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.hasError) {\r\n            return <ErrorIndicator />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        hasError: state.errorBoundry.hasError\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setErrorBoundryState: () => dispatch(setErrorBoundryState())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorBoundry);","import React from 'react';\r\nimport {NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <NavLink className=\"navbar-brand\" to=\"/countries/\">Countries</NavLink>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/africa/\">Africa</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/americas/\">Americas</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/asia/\">Asia</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/europe/\">Europe</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/oceania/\">Oceania</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/countries-by-language/\">Countries By Language</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/favorite-countries/\">Favorite countries</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center w-100\">\r\n            <div className=\"spinner-border text-success\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport ErrorIndicator from \"../ErrorIndicator/ErrorIndicator\";\r\nimport {fetchRandomCountry} from \"../../redux/actions/Actions\";\r\nimport './RandomCountry.scss';\r\n\r\nclass RandomCountry extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchRandomCountry();\r\n        this.fetchInterval = setInterval(this.props.fetchRandomCountry, 3000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.fetchInterval);\r\n    }\r\n\r\n    render() {\r\n        const {country, loading, error} = this.props;\r\n        const hasData = !(loading || error);\r\n        const errorMessage = error ? <ErrorIndicator/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = hasData ? <CountryView country={country}/> : null;\r\n\r\n        return (\r\n            <div className=\"random-country jumbotron rounded\">\r\n                <div className=\"container\">\r\n                    {errorMessage}\r\n                    {spinner}\r\n                    {content}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst CountryView = ({country}) => {\r\n    const {name, alpha3Code, capital, population, subregion, region, currencies, flag} = country;\r\n\r\n    return (\r\n        <>\r\n            <img className=\"country-image\"\r\n                 src={flag}\r\n                 alt=\"country\" />\r\n            <div>\r\n                <h4>{name} - {alpha3Code}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {currencies.map((currency,index) => {\r\n                        return (<li className=\"list-group-item\" key={index}>\r\n                            <span className=\"term\">Currency: </span>\r\n                            <span>{currency.name}{currency.symbol ? ` - ${currency.symbol}` : null}</span>\r\n                        </li>);\r\n                    })}\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Capital: </span>\r\n                        <span>{capital}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population: </span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Subregion: </span>\r\n                        <span>{subregion}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Region: </span>\r\n                        <span>{region}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        country: state.randomCountry.country,\r\n        loading: state.randomCountry.loading,\r\n        error: state.randomCountry.error\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchRandomCountry: () => dispatch(fetchRandomCountry())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RandomCountry);","import React from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport {addCountryToFavorites, removeCountryFromFavorites} from \"../../redux/actions/Actions\";\r\nimport './ItemList.scss';\r\n\r\nconst ItemList = (props) => {\r\n    const {countries, loading, onItemSelected, addCountryToFavorites, removeCountryFromFavorites, location} = props;\r\n\r\n    const items = countries.map((country, index) => {\r\n        const {name, capital, languageName, alpha3Code} = country;\r\n\r\n        return (\r\n            <Card key={name}>\r\n                <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey={index}>\r\n                        {name}\r\n                    </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={index}>\r\n                    <Card.Body >\r\n                        The capital is {capital}. Language - {languageName}\r\n                        <ButtonToolbar className=\"justify-content-space mt-3\">\r\n                            <Button variant=\"primary\" size=\"sm\" className=\"mr-2\" onClick={() => onItemSelected(name)}>More info</Button>\r\n                            {/favorite-countries/i.test(location.pathname) ? (\r\n                                <Button variant=\"danger\" size=\"sm\" className=\"mr-2\" onClick={() => removeCountryFromFavorites(alpha3Code)}>Remove from favorites</Button>\r\n                            ) : (\r\n                                <Button variant=\"success\" size=\"sm\" className=\"mr-2\" onClick={() => addCountryToFavorites(alpha3Code)}>Add to favorites</Button>\r\n                            )}\r\n                        </ButtonToolbar>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        );\r\n    });\r\n\r\n    if (loading) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Accordion>\r\n            {items}\r\n        </Accordion>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        countries: state.countries.filteredCountries,\r\n        loading: state.countries.loadingCountries,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        addCountryToFavorites: (countryCode) => dispatch(addCountryToFavorites(countryCode)),\r\n        removeCountryFromFavorites: (countryCode) => dispatch(removeCountryFromFavorites(countryCode))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ItemList));\r\n","import React, { Component } from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport {fetchCountry} from \"../../redux/actions/Actions\";\r\nimport './ItemDetails.scss';\r\n\r\n\r\nclass ItemDetails extends Component {\r\n    componentDidMount() {\r\n        this.updateItem();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.itemName !== prevProps.itemName) {\r\n            this.updateItem();\r\n        }\r\n    }\r\n\r\n    updateItem() {\r\n        const {itemName} = this.props;\r\n\r\n        if (!itemName) return;\r\n\r\n        this.props.fetchCountry(itemName);\r\n    }\r\n\r\n    render() {\r\n        const {country, loading} = this.props;\r\n\r\n        if (!country) {\r\n            return <span className=\"select-country-text\">Select a country from a list</span>;\r\n        }\r\n\r\n        if (loading) {\r\n            return <Spinner />;\r\n        }\r\n\r\n        const {name, capital, population, subregion, region, currencies, flag} = country;\r\n\r\n        return (\r\n            <div className=\"item-details card\">\r\n                <img className=\"item-image\"\r\n                     src={flag}\r\n                     alt=\"flag\"/>\r\n\r\n                <div className=\"card-body\">\r\n                    <h4>{name}</h4>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {currencies.map((currency,index) => {\r\n                            return (\r\n                                <li className=\"list-group-item\" key={index}>\r\n                                <span className=\"term\">Currency: </span>\r\n                                <span>{currency.name}{currency.symbol ? ` - ${currency.symbol}` : null}</span>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Capital: </span>\r\n                            <span>{capital}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Population: </span>\r\n                            <span>{population}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Subregion: </span>\r\n                            <span>{subregion}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Region: </span>\r\n                            <span>{region}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        country: state.countries.country,\r\n        loading: state.countries.loadingCountry,\r\n        error: state.countries.error\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountry: (country) => dispatch(fetchCountry(country)),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemDetails);\r\n\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {filterCountryBySubregion} from \"../../redux/actions/Actions\";\r\nimport './ItemFilters.scss';\r\n\r\nclass ItemFilters extends Component{\r\n    render() {\r\n        const {countryFilters, selectedCountryFilter, filterCountryBySubregion} = this.props;\r\n\r\n        const filters = countryFilters.map((filter) => {\r\n            const cls = filter === selectedCountryFilter ? 'btn-info' : 'btn-outline-info';\r\n\r\n            return (\r\n                <button\r\n                    key={filter}\r\n                    type=\"button\"\r\n                    value={filter}\r\n                    className={`btn ${cls}`}\r\n                    onClick={() => filterCountryBySubregion(filter)}\r\n                >\r\n                    {filter}\r\n                </button>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"btn-group mb-5\">\r\n                {filters}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        countryFilters: state.countries.countryFilters,\r\n        selectedCountryFilter: state.countries.selectedCountryFilter\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        filterCountryBySubregion: (filterName) => dispatch(filterCountryBySubregion(filterName))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ItemFilters));","import React from 'react';\r\n\r\nconst ContentRow = ({top, leftSide, rightSide}) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row mb2\">\r\n                <div className=\"col-md-12\">\r\n                    {top}\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {leftSide}\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {rightSide}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentRow;","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass AfricaPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'africa';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AfricaPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass AmericasPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'americas';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AmericasPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass AsiaPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'asia';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AsiaPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass EuropePage extends Component {\r\n    componentDidMount() {\r\n        const region = 'europe';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EuropePage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass OceaniaPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'oceania';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OceaniaPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchFavoritesCountries, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass FavoriteCountriesPage extends Component {\r\n    componentDidMount() {\r\n        const favoritesCountriesList = this.props.favoriteCountries.join(';');\r\n        this.props.fetchFavoritesCountries(favoritesCountriesList);\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (prevState.favoriteCountries.length !== this.props.favoriteCountries.length) {\r\n            const favoritesCountriesList = this.props.favoriteCountries.join(';');\r\n            this.props.fetchFavoritesCountries(favoritesCountriesList);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.favoriteCountries.length) {\r\n            return (\r\n                <div className=\"alert alert-danger w-50 mx-auto my-5\" role=\"alert\">\r\n                    The list of favorites countries is empty. Please add countries to your favorites!\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        favoriteCountries: state.countries.favoriteCountries,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchFavoritesCountries: (region) => dispatch(fetchFavoritesCountries(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCountriesPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {filterCountryByLanguage} from \"../../redux/actions/Actions\";\r\nimport './ItemSelect.scss';\r\n\r\nclass ItemSelect extends Component{\r\n    render() {\r\n        const {languageFilters, selectedlanguageFilter, filterCountryByLanguage} = this.props;\r\n\r\n        const filters = languageFilters.map((filter, index) => {\r\n            return (\r\n                <option\r\n                    key={filter}\r\n                    value={filter}\r\n                >\r\n                    {filter}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <form>\r\n                <div className=\"form-group w-50 mb-5\">\r\n                    <select className=\"form-control\" id=\"item-select\" value={selectedlanguageFilter} onChange={(event) => filterCountryByLanguage(event.target.value)}>\r\n                        {filters}\r\n                    </select>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        languageFilters: state.countries.languageFilters,\r\n        selectedlanguageFilter: state.countries.selectedlanguageFilter\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        filterCountryByLanguage: (filterName) => dispatch(filterCountryByLanguage(filterName))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemSelect);","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemSelect from '../ItemSelect/ItemSelect';\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByLanguage, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass CountriesByLanguagePage extends Component {\r\n    componentDidMount() {\r\n        const language = 'en';\r\n        this.props.fetchCountriesByLanguage(language);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemSelect/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByLanguage: (language) => dispatch(fetchCountriesByLanguage(language)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesByLanguagePage);\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport ErrorBoundry from \"../ErrorBoundry/ErrorBoundry\";\r\nimport Header from \"../Header/Header\";\r\nimport RandomCountry from \"../RandomCountry/RandomCountry\";\r\nimport {AfricaPage, AmericasPage, AsiaPage, EuropePage, OceaniaPage, CountriesByLanguagePage, FavoriteCountriesPage} from '../Pages';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n    return (\r\n      <>\r\n          <ErrorBoundry>\r\n              <Router>\r\n                  <Header/>\r\n                  <RandomCountry/>\r\n                  <Switch>\r\n                      <Route path=\"/countries/\" exact render={() => <h1 className=\"heading-text text-primary\">Welcome to Countries Application</h1>}/>\r\n                      <Route path=\"/countries/africa/:name?\" component={AfricaPage} />\r\n                      <Route path=\"/countries/americas/:name?\" component={AmericasPage} />\r\n                      <Route path=\"/countries/asia/:name?\" component={AsiaPage} />\r\n                      <Route path=\"/countries/europe/:name?\" component={EuropePage} />\r\n                      <Route path=\"/countries/oceania/:name?\" component={OceaniaPage} />\r\n                      <Route path=\"/countries/countries-by-language/:name?\" component={CountriesByLanguagePage} />\r\n                      <Route path=\"/countries/favorite-countries/:name?\" component={FavoriteCountriesPage} />\r\n                      <Route render={() => <h1 className=\"heading-text text-danger\">404<br/>Page not found</h1>} />\r\n                  </Switch>\r\n              </Router>\r\n          </ErrorBoundry>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {Provider} from 'react-redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport RootReducer from './redux/reducers/RootReducer'\r\nimport App from './components/App/App';\r\nimport './index.scss';\r\n\r\nconst store = createStore(RootReducer, composeWithDevTools(\r\n    applyMiddleware(ReduxThunk),\r\n));\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('countries'));\r\n"],"sourceRoot":""}