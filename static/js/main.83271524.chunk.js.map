{"version":3,"sources":["components/ErrorIndicator/earth.png","redux/actions/ActionTypes.js","redux/reducers/RandomCountryReducer.js","redux/reducers/ErrorBoundryReducer.js","redux/reducers/CountriesReducer.js","redux/reducers/RootReducer.js","components/ErrorIndicator/ErrorIndicator.js","services/RCApiService.js","redux/actions/Actions.js","components/ErrorBoundry/ErrorBoundry.js","components/Header/Header.js","components/Spinner/Spinner.js","components/RandomCountry/RandomCountry.js","components/ItemList/ItemList.js","components/ItemDetails/ItemDetails.js","components/ItemFilters/ItemFilters.js","components/ContentRow/ContentRow.js","components/Pages/AfricaPage.js","components/Pages/AmericasPage.js","components/Pages/AsiaPage.js","components/Pages/EuropePage.js","components/Pages/OceaniaPage.js","components/Pages/FavoriteCountriesPage.js","components/ItemSelect/ItemSelect.js","components/Pages/CountriesByLanguagePage.js","components/App/App.js","index.js"],"names":["module","exports","RANDOM_COUNTRY_LOADED","RANDOM_COUNTRY_ERROR","ERROR_BOUNDRY_HAS_ERROR","FETCH_COUNTRIES_START","FETCH_COUNTRIES_SUCCESS","FETCH_COUNTRIES_ERROR","FETCH_COUNTRY_START","FETCH_COUNTRY_SUCCESS","FETCH_COUNTRY_ERROR","RESET_COUNTRIES_DATA","SET_SELECTED_COUNTRIES","FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS","FILTER_COUNTRY_BY_LANGUAGE_SUCCESS","initialState","country","loading","error","hasError","loadingCountries","loadingCountry","countries","filteredCountries","countryFilters","selectedCountryFilter","languageFilters","selectedlanguageFilter","combineReducers","randomCountry","state","action","type","payload","errorBoundry","filterName","ErrorIndicator","className","src","icon","alt","RCApiService","_apiBase","_params","getResource","url","a","fetch","res","ok","Error","status","JSON","parse","localStorage","getItem","setItem","stringify","json","getRandomCountry","id","_transformCountry","getCountriesByRegion","region","result","map","getCountriesByLanguage","getCountriesByLanguageCode","languageCode","getFavoritesCountries","countriesList","getCountry","countryName","callingCodes","name","flag","alpha3Code","capital","population","subregion","currencies","languageName","languages","rcApiService","randomCountryError","err","fetchCountriesByRegion","dispatch","fetchCountriesStart","then","fetchCountriesSuccess","catch","fetchCountriesError","fetchCountriesByLanguageSuccess","forEach","language","languageFilter","iso639_2","indexOf","push","filterCountryByLanguageSuccess","resetCountriesData","fetchCountryStart","filterCountryBySubregion","getState","filter","setSelectedCountryies","ErrorBoundry","this","props","setErrorBoundryState","children","Component","connect","Header","navBar","React","createRef","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","current","classList","toggle","ref","Spinner","role","RandomCountry","fetchRandomCountry","fetchInterval","setInterval","clearTimeout","hasData","errorMessage","spinner","content","CountryView","currency","index","key","symbol","Math","floor","random","withRouter","onItemSelected","location","items","Toggle","as","Button","variant","eventKey","Collapse","Body","size","test","pathname","countryCode","localStorageData","splice","removeCountryFromFavorites","addCountryToFavorites","ItemDetails","updateItem","prevProps","itemName","fetchCountry","ItemFilters","filters","cls","value","ContentRow","top","leftSide","rightSide","AfricaPage","history","match","params","AmericasPage","AsiaPage","EuropePage","OceaniaPage","FavoriteCountriesPage","fetchCountries","favoritesCountriesList","favoriteCountries","join","fetchFavoritesCountries","length","prevState","ItemSelect","filterCountryByLanguage","onChange","event","target","disabled","exec","CountriesByLanguagePage","fetchCountriesByLanguage","App","path","exact","render","component","store","createStore","RootReducer","composeWithDevTools","applyMiddleware","ReduxThunk","app","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.83271524.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth.356a221d.png\";","export const RANDOM_COUNTRY_LOADED = 'RANDOM_COUNTRY_LOADED';\r\nexport const RANDOM_COUNTRY_ERROR = 'RANDOM_COUNTRY_ERROR';\r\nexport const ERROR_BOUNDRY_HAS_ERROR = 'ERROR_BOUNDRY_HAS_ERROR';\r\nexport const FETCH_COUNTRIES_START = 'FETCH_COUNTRIES_START';\r\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS';\r\nexport const FETCH_COUNTRIES_ERROR = 'FETCH_COUNTRIES_ERROR';\r\nexport const FETCH_COUNTRY_START = 'FETCH_COUNTRY_START';\r\nexport const FETCH_COUNTRY_SUCCESS = 'FETCH_COUNTRY_SUCCESS';\r\nexport const FETCH_COUNTRY_ERROR = 'FETCH_COUNTRY_ERROR';\r\nexport const RESET_COUNTRIES_DATA = 'RESET_COUNTRIES_DATA';\r\nexport const SET_SELECTED_COUNTRIES = 'SET_SELECTED_COUNTRIES';\r\nexport const FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS = 'FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS';\r\nexport const FILTER_COUNTRY_BY_LANGUAGE_SUCCESS = 'FILTER_COUNTRY_BY_LANGUAGE_SUCCESS';\r\n","import {RANDOM_COUNTRY_LOADED, RANDOM_COUNTRY_ERROR} from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    country: {},\r\n    loading: true,\r\n    error: false\r\n};\r\n\r\nexport default function randomCountryReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case RANDOM_COUNTRY_LOADED:\r\n            return {\r\n                ...state,\r\n                country: action.payload,\r\n                loading: false,\r\n                error: false\r\n            };\r\n        case RANDOM_COUNTRY_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {ERROR_BOUNDRY_HAS_ERROR} from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    hasError: false\r\n};\r\n\r\nexport default function errorBoundryReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ERROR_BOUNDRY_HAS_ERROR:\r\n            return {\r\n                hasError: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    FETCH_COUNTRIES_START,\r\n    FETCH_COUNTRIES_SUCCESS,\r\n    FETCH_COUNTRIES_ERROR,\r\n    RESET_COUNTRIES_DATA,\r\n    FETCH_COUNTRY_START,\r\n    FETCH_COUNTRY_SUCCESS,\r\n    FETCH_COUNTRY_ERROR,\r\n    SET_SELECTED_COUNTRIES,\r\n    FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS,\r\n    FILTER_COUNTRY_BY_LANGUAGE_SUCCESS\r\n} from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    loadingCountries: true,\r\n    loadingCountry: true,\r\n    error: false,\r\n    country: null,\r\n    countries: [],\r\n    filteredCountries: [],\r\n    countryFilters: [],\r\n    selectedCountryFilter: null,\r\n    languageFilters: [],\r\n    selectedlanguageFilter: ''\r\n};\r\n\r\nexport default function countriesReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_COUNTRIES_START:\r\n            return {\r\n                ...state,\r\n                loadingCountries: true,\r\n                country: null,\r\n                error: false\r\n            };\r\n        case FETCH_COUNTRIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingCountries: false,\r\n                error: false,\r\n                countries: action.payload,\r\n                filteredCountries: action.payload,\r\n                countryFilters: action.countryFilters\r\n            };\r\n        case FETCH_COUNTRIES_ERROR:\r\n            return {\r\n                ...state,\r\n                loadingCountries: false,\r\n                error: true\r\n            };\r\n        case RESET_COUNTRIES_DATA:\r\n            return {\r\n                ...state,\r\n                loadingCountries: true,\r\n                loadingCountry: true,\r\n                error: false,\r\n                country: null,\r\n                countries: [],\r\n                filteredCountries: [],\r\n                countryFilters: [],\r\n                selectedCountryFilter: null,\r\n                languageFilters: [],\r\n                selectedlanguageFilter: ''\r\n            };\r\n        case FETCH_COUNTRY_START:\r\n            return {\r\n                ...state,\r\n                loadingCountry: true,\r\n                error: false\r\n            };\r\n        case FETCH_COUNTRY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingCountry: false,\r\n                error: false,\r\n                country: action.payload\r\n            };\r\n        case FETCH_COUNTRY_ERROR:\r\n            return {\r\n                ...state,\r\n                loadingCountry: false,\r\n                error: true\r\n            };\r\n        case SET_SELECTED_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                loadingCountries: false,\r\n                loadingCountry: false,\r\n                selectedCountryFilter: action.filterName,\r\n                filteredCountries: action.payload\r\n            };\r\n        case FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingCountries: false,\r\n                error: false,\r\n                countries: action.payload,\r\n                filteredCountries: action.payload,\r\n                languageFilters: action.languageFilters\r\n            };\r\n            case FILTER_COUNTRY_BY_LANGUAGE_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    loadingCountries: false,\r\n                    error: false,\r\n                    countries: action.payload,\r\n                    filteredCountries: action.payload,\r\n                    selectedlanguageFilter: action.selectedlanguageFilter\r\n                };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport randomCountryReducer from './RandomCountryReducer';\r\nimport errorBoundryReducer from './ErrorBoundryReducer';\r\nimport countriesReducer from \"./CountriesReducer\";\r\n\r\nexport default combineReducers({\r\n    randomCountry: randomCountryReducer,\r\n    errorBoundry: errorBoundryReducer,\r\n    countries: countriesReducer\r\n});","import React from 'react';\r\nimport icon from './earth.png';\r\nimport './ErrorIndicator.scss'\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator text-primary\">\r\n            <img src={icon} alt=\"error icon\"/>\r\n            <span className=\"boom\">BOOM!</span>\r\n            <span>something has gone terribly wrong</span>\r\n            <span>(but we already fix it)</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;\r\n","export default class RCApiService {\r\n    _apiBase = 'https://restcountries.eu';\r\n    _params = '?fields=name;flag;callingCodes;alpha3Code;capital;population;subregion;region;currencies;languages';\r\n\r\n    getResource = async url => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, received ${res.status}`)\r\n        }\r\n\r\n        if (JSON.parse(localStorage.getItem('favoriteCountries')) === null) {\r\n            localStorage.setItem('favoriteCountries', JSON.stringify([]));\r\n        }\r\n\r\n        return res.json();\r\n    };\r\n\r\n    getRandomCountry = async id => {\r\n        const [country] = await this.getResource(`/rest/v2/callingcode/${id}${this._params}`);\r\n        return RCApiService._transformCountry(country);\r\n    };\r\n\r\n    getCountriesByRegion = async region => {\r\n        const result = await this.getResource(`/rest/v2/region/${region}${this._params}`);\r\n        return result.map(RCApiService._transformCountry);\r\n    };\r\n\r\n    getCountriesByLanguage = async () => {\r\n        return await this.getResource(`/rest/v2/all${this._params}`);\r\n    };\r\n\r\n    getCountriesByLanguageCode = async languageCode => {\r\n        return await this.getResource(`/rest/v2/lang/${languageCode}${this._params}`);\r\n    };\r\n\r\n    getFavoritesCountries = async countriesList => {\r\n        const result = await this.getResource(`/rest/v2/alpha?codes=${countriesList}`);\r\n        return result.map(RCApiService._transformCountry);\r\n    };\r\n\r\n    getCountry = async countryName => {\r\n        const [country] = await this.getResource(`/rest/v2/name/${countryName}${this._params}`);\r\n        return RCApiService._transformCountry(country);\r\n    };\r\n\r\n    static _transformCountry = country => {\r\n        return {\r\n            id: country.callingCodes[0],\r\n            name: country.name,\r\n            flag: country.flag,\r\n            alpha3Code: country.alpha3Code,\r\n            capital: country.capital,\r\n            population: country.population,\r\n            subregion: country.subregion,\r\n            region: country.region,\r\n            currencies: country.currencies,\r\n            languageName: country.languages[0].name\r\n        }\r\n    };\r\n}","import RCApiService from '../../services/RCApiService';\r\nimport {\r\n    RANDOM_COUNTRY_LOADED,\r\n    RANDOM_COUNTRY_ERROR,\r\n    ERROR_BOUNDRY_HAS_ERROR,\r\n    FETCH_COUNTRIES_START,\r\n    FETCH_COUNTRIES_SUCCESS,\r\n    FETCH_COUNTRIES_ERROR,\r\n    RESET_COUNTRIES_DATA,\r\n    FETCH_COUNTRY_START,\r\n    FETCH_COUNTRY_SUCCESS,\r\n    FETCH_COUNTRY_ERROR,\r\n    SET_SELECTED_COUNTRIES,\r\n    FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS,\r\n    FILTER_COUNTRY_BY_LANGUAGE_SUCCESS\r\n} from '../actions/ActionTypes';\r\n\r\nconst rcApiService = new RCApiService();\r\n\r\nexport function fetchRandomCountry() {\r\n    const callingCodes = [\"93\", \"358\", \"355\", \"213\", \"1684\", \"376\", \"244\", \"1264\", \"672\", \"1268\", \"54\", \"374\", \"297\", \"61\", \"43\", \"994\", \"1242\", \"973\", \"880\", \"1246\", \"375\", \"32\", \"501\", \"229\", \"1441\", \"975\", \"591\", \"5997\", \"387\", \"267\", \"\", \"55\", \"246\", \"\", \"1284\", \"1 340\", \"673\", \"359\", \"226\", \"257\", \"855\", \"237\", \"1\", \"238\", \"1345\", \"236\", \"235\", \"56\", \"86\", \"61\", \"61\", \"57\", \"269\", \"242\", \"243\", \"682\", \"506\", \"385\", \"53\", \"599\", \"357\", \"420\", \"45\", \"253\", \"1767\", \"1809\", \"593\", \"20\", \"503\", \"240\", \"291\", \"372\", \"251\", \"500\", \"298\", \"679\", \"358\", \"33\", \"594\", \"689\", \"\", \"241\", \"220\", \"995\", \"49\", \"233\", \"350\", \"30\", \"299\", \"1473\", \"590\", \"1671\", \"502\", \"44\", \"224\", \"245\", \"592\", \"509\", \"\", \"379\", \"504\", \"852\", \"36\", \"354\", \"91\", \"62\", \"225\", \"98\", \"964\", \"353\", \"44\", \"972\", \"39\", \"1876\", \"81\", \"44\", \"962\", \"76\", \"254\", \"686\", \"965\", \"996\", \"856\", \"371\", \"961\", \"266\", \"231\", \"218\", \"423\", \"370\", \"352\", \"853\", \"389\", \"261\", \"265\", \"60\", \"960\", \"223\", \"356\", \"692\", \"596\", \"222\", \"230\", \"262\", \"52\", \"691\", \"373\", \"377\", \"976\", \"382\", \"1664\", \"212\", \"258\", \"95\", \"264\", \"674\", \"977\", \"31\", \"687\", \"64\", \"505\", \"227\", \"234\", \"683\", \"672\", \"850\", \"1670\", \"47\", \"968\", \"92\", \"680\", \"970\", \"507\", \"675\", \"595\", \"51\", \"63\", \"64\", \"48\", \"351\", \"1787\", \"974\", \"383\", \"262\", \"40\", \"7\", \"250\", \"590\", \"290\", \"1869\", \"1758\", \"590\", \"508\", \"1784\", \"685\", \"378\", \"239\", \"966\", \"221\", \"381\", \"248\", \"232\", \"65\", \"1721\", \"421\", \"386\", \"677\", \"252\", \"27\", \"500\", \"82\", \"211\", \"34\", \"94\", \"249\", \"597\", \"4779\", \"268\", \"46\", \"41\", \"963\", \"886\", \"992\", \"255\", \"66\", \"670\", \"228\", \"690\", \"676\", \"1868\", \"216\", \"90\", \"993\", \"1649\", \"688\", \"256\", \"380\", \"971\", \"44\", \"1\", \"598\", \"998\", \"678\", \"58\", \"84\", \"681\", \"212\", \"967\", \"260\", \"263\"]\r\n    const id = callingCodes[Math.floor(Math.random() * 250)];\r\n\r\n    return async dispatch => {\r\n        rcApiService\r\n            .getRandomCountry(id)\r\n            .then(res => dispatch(randomCountryLoaded(res)))\r\n            .catch(err => dispatch(randomCountryError(err)));\r\n    }\r\n}\r\n\r\nexport function randomCountryLoaded (country) {\r\n    return {\r\n        type: RANDOM_COUNTRY_LOADED,\r\n        payload: country\r\n    }\r\n}\r\n\r\nexport function randomCountryError (err) {\r\n    return {\r\n        type: RANDOM_COUNTRY_ERROR\r\n    }\r\n}\r\n\r\nexport function setErrorBoundryState() {\r\n    return {\r\n        type: ERROR_BOUNDRY_HAS_ERROR\r\n    }\r\n}\r\n\r\nexport function fetchCountriesByRegion(region) {\r\n    return async dispatch => {\r\n        dispatch(fetchCountriesStart());\r\n\r\n        rcApiService\r\n            .getCountriesByRegion(region)\r\n            .then(res => dispatch(fetchCountriesSuccess(res)))\r\n            .catch(err => dispatch(fetchCountriesError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountriesByLanguage() {\r\n    return async dispatch => {\r\n        dispatch(fetchCountriesStart());\r\n\r\n        rcApiService\r\n            .getCountriesByLanguage()\r\n            .then(res => dispatch(fetchCountriesByLanguageSuccess(res)))\r\n            .catch(err => dispatch(fetchCountriesError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountriesByLanguageSuccess(countries) {\r\n    const languageFilters = [];\r\n\r\n    countries.forEach(country => {\r\n        country.languages.forEach((language) => {\r\n            const languageFilter = `${language.name} - ${language.iso639_2}`;\r\n\r\n            if (languageFilters.indexOf(languageFilter) === -1 ) {\r\n                languageFilters.push(languageFilter);\r\n            }\r\n        });\r\n    });\r\n\r\n    return {\r\n        type: FETCH_COUNTRIES_BY_LANGUAGE_SUCCESS,\r\n        payload: countries,\r\n        languageFilters: languageFilters\r\n    }\r\n}\r\n\r\nexport function filterCountryByLanguage(languageName) {\r\n    const languageCode = /\\w{3}$/g.exec(languageName)[0];\r\n\r\n    return async dispatch => {\r\n        dispatch(fetchCountriesStart());\r\n\r\n        rcApiService\r\n            .getCountriesByLanguageCode(languageCode)\r\n            .then(res => dispatch(filterCountryByLanguageSuccess(res, languageName)))\r\n            .catch(err => dispatch(fetchCountriesError(err)));\r\n    }\r\n}\r\n\r\nexport function filterCountryByLanguageSuccess(countries, languageName) {\r\n    return {\r\n        type: FILTER_COUNTRY_BY_LANGUAGE_SUCCESS,\r\n        payload: countries,\r\n        selectedlanguageFilter: languageName\r\n    }\r\n}\r\n\r\nexport function fetchCountriesStart() {\r\n    return {\r\n        type: FETCH_COUNTRIES_START\r\n    }\r\n}\r\n\r\nexport function fetchCountriesSuccess(countries) {\r\n    const countryFilters = [];\r\n\r\n    countries.forEach(country => {\r\n        if (countryFilters.indexOf(country.subregion) === -1 ) {\r\n            countryFilters.push(country.subregion);\r\n        }\r\n    });\r\n\r\n    return {\r\n        type: FETCH_COUNTRIES_SUCCESS,\r\n        payload: countries,\r\n        countryFilters: countryFilters\r\n    }\r\n}\r\n\r\nexport function fetchCountriesError(err) {\r\n    return {\r\n        type: FETCH_COUNTRIES_ERROR\r\n    }\r\n}\r\n\r\nexport function resetCountriesData() {\r\n    return {\r\n        type: RESET_COUNTRIES_DATA\r\n    }\r\n}\r\n\r\nexport function fetchFavoritesCountries(countriesList) {\r\n    return async dispatch => {\r\n        dispatch(fetchCountriesStart());\r\n\r\n        rcApiService\r\n            .getFavoritesCountries(countriesList)\r\n            .then(res => dispatch(fetchCountriesSuccess(res)))\r\n            .catch(err => dispatch(fetchCountriesError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountry(countryName) {\r\n    return async dispatch => {\r\n        dispatch(fetchCountryStart());\r\n\r\n        rcApiService\r\n            .getCountry(countryName)\r\n            .then(res => dispatch(fetchCountrySuccess(res)))\r\n            .catch(err => dispatch(fetchCountryError(err)));\r\n    }\r\n}\r\n\r\nexport function fetchCountryStart() {\r\n    return {\r\n        type: FETCH_COUNTRY_START\r\n    }\r\n}\r\n\r\nexport function fetchCountrySuccess(country) {\r\n    return {\r\n        type: FETCH_COUNTRY_SUCCESS,\r\n        payload: country\r\n    }\r\n}\r\n\r\nexport function fetchCountryError(err) {\r\n    return {\r\n        type: FETCH_COUNTRY_ERROR\r\n    }\r\n}\r\n\r\nexport function filterCountryBySubregion(filterName) {\r\n    return (dispatch, getState) => {\r\n        const state = getState().countries;\r\n        const filteredCountries = state.countries.filter((country) => country.subregion === filterName);\r\n\r\n        dispatch(fetchCountriesStart());\r\n        dispatch(fetchCountryStart());\r\n        dispatch(setSelectedCountryies(filterName, filteredCountries));\r\n    }\r\n}\r\n\r\nexport function setSelectedCountryies(filterName, countries) {\r\n    return {\r\n        type: SET_SELECTED_COUNTRIES,\r\n        payload: countries,\r\n        filterName: filterName\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport ErrorIndicator from '../ErrorIndicator/ErrorIndicator';\r\nimport {setErrorBoundryState} from \"../../redux/actions/Actions\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    componentDidCatch() {\r\n        this.props.setErrorBoundryState();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.hasError) {\r\n            return <ErrorIndicator />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        hasError: state.errorBoundry.hasError\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setErrorBoundryState: () => dispatch(setErrorBoundryState())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorBoundry);","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    const navBar = React.createRef();\r\n\r\n    function toggleNavBar() {\r\n        navBar.current.classList.toggle('show');\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <NavLink className=\"navbar-brand\" to=\"/countries/\">Countries</NavLink>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\"\r\n                    onClick={toggleNavBar}\r\n            >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" ref={navBar}>\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/africa/\">Africa</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/americas/\">Americas</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/asia/\">Asia</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/europe/\">Europe</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/oceania/\">Oceania</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/countries-by-language/\">Countries By Language</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink className=\"nav-link\" to=\"/countries/favorite-countries/\">Favorite countries</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center w-100\">\r\n            <div className=\"spinner-border text-success\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport ErrorIndicator from \"../ErrorIndicator/ErrorIndicator\";\r\nimport {fetchRandomCountry} from \"../../redux/actions/Actions\";\r\nimport './RandomCountry.scss';\r\n\r\nclass RandomCountry extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchRandomCountry();\r\n        this.fetchInterval = setInterval(this.props.fetchRandomCountry, 5000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.fetchInterval);\r\n    }\r\n\r\n    render() {\r\n        const {country, loading, error} = this.props;\r\n        const hasData = !(loading || error);\r\n        const errorMessage = error ? <ErrorIndicator/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = hasData ? <CountryView country={country}/> : null;\r\n\r\n        return (\r\n            <div className=\"random-country jumbotron rounded\">\r\n                <div className=\"container\">\r\n                    {errorMessage}\r\n                    {spinner}\r\n                    {content}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst CountryView = ({country}) => {\r\n    const {name, alpha3Code, capital, population, subregion, region, currencies, flag} = country;\r\n\r\n    return (\r\n        <>\r\n            <img className=\"country-image\"\r\n                 src={flag}\r\n                 alt=\"country\" />\r\n            <div>\r\n                <h4>{name} - {alpha3Code}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {currencies.map((currency,index) => {\r\n                        return (<li className=\"list-group-item\" key={index}>\r\n                            <span className=\"term\">Currency: </span>\r\n                            <span>{currency.name}{currency.symbol ? ` - ${currency.symbol}` : null}</span>\r\n                        </li>);\r\n                    })}\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Capital: </span>\r\n                        <span>{capital}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population: </span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Subregion: </span>\r\n                        <span>{subregion}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Region: </span>\r\n                        <span>{region}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        country: state.randomCountry.country,\r\n        loading: state.randomCountry.loading,\r\n        error: state.randomCountry.error\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchRandomCountry: () => dispatch(fetchRandomCountry())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RandomCountry);","import React from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport './ItemList.scss';\r\n\r\nconst ItemList = (props) => {\r\n    const {countries, loading, onItemSelected, location} = props;\r\n\r\n    const addCountryToFavorites = (countryCode) => {\r\n        const localStorageData = JSON.parse(localStorage.getItem('favoriteCountries'));\r\n\r\n        if (localStorageData === null) {\r\n            localStorage.setItem('favoriteCountries', JSON.stringify([countryCode]));\r\n        } else {\r\n            localStorageData.push(countryCode);\r\n            localStorage.setItem('favoriteCountries', JSON.stringify(localStorageData));\r\n        }\r\n    };\r\n\r\n    const removeCountryFromFavorites = (countryCode) => {\r\n        const localStorageData = JSON.parse(localStorage.getItem('favoriteCountries')),\r\n            index = localStorageData.indexOf(countryCode);\r\n\r\n        localStorageData.splice(index, 1);\r\n\r\n        localStorage.setItem('favoriteCountries', JSON.stringify(localStorageData));\r\n    };\r\n\r\n    const items = countries.map((country, index) => {\r\n        const {name, capital, languageName, alpha3Code} = country;\r\n\r\n        return (\r\n            <Card key={name}>\r\n                <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey={index}>\r\n                        {name}\r\n                    </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={index}>\r\n                    <Card.Body >\r\n                        The capital is {capital}. Language - {languageName}\r\n                        <ButtonToolbar className=\"justify-content-space mt-3\">\r\n                            <Button variant=\"primary\" size=\"sm\" className=\"mr-2\" onClick={() => onItemSelected(name)}>More info</Button>\r\n                            {/favorite-countries/i.test(location.pathname) ? (\r\n                                <Button variant=\"danger\" size=\"sm\" className=\"mr-2\" onClick={() => removeCountryFromFavorites(alpha3Code)}>Remove from favorites</Button>\r\n                            ) : (\r\n                                <Button variant=\"success\" size=\"sm\" className=\"mr-2\" onClick={() => addCountryToFavorites(alpha3Code)}>Add to favorites</Button>\r\n                            )}\r\n                        </ButtonToolbar>\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        );\r\n    });\r\n\r\n    if (loading) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <Accordion>\r\n            {items}\r\n        </Accordion>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        countries: state.countries.filteredCountries,\r\n        loading: state.countries.loadingCountries,\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(ItemList));\r\n","import React, { Component } from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport {fetchCountry} from \"../../redux/actions/Actions\";\r\nimport './ItemDetails.scss';\r\n\r\n\r\nclass ItemDetails extends Component {\r\n    componentDidMount() {\r\n        this.updateItem();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.itemName !== prevProps.itemName) {\r\n            this.updateItem();\r\n        }\r\n    }\r\n\r\n    updateItem() {\r\n        const {itemName} = this.props;\r\n\r\n        if (!itemName) return;\r\n\r\n        this.props.fetchCountry(itemName);\r\n    }\r\n\r\n    render() {\r\n        const {country, loading} = this.props;\r\n\r\n        if (!country) {\r\n            return <span className=\"select-country-text\">Select a country from a list</span>;\r\n        }\r\n\r\n        if (loading) {\r\n            return <Spinner />;\r\n        }\r\n\r\n        const {name, capital, population, subregion, region, currencies, flag} = country;\r\n\r\n        return (\r\n            <div className=\"item-details card\">\r\n                <img className=\"item-image\"\r\n                     src={flag}\r\n                     alt=\"flag\"/>\r\n\r\n                <div className=\"card-body\">\r\n                    <h4>{name}</h4>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {currencies.map((currency,index) => {\r\n                            return (\r\n                                <li className=\"list-group-item\" key={index}>\r\n                                <span className=\"term\">Currency: </span>\r\n                                <span>{currency.name}{currency.symbol ? ` - ${currency.symbol}` : null}</span>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Capital: </span>\r\n                            <span>{capital}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Population: </span>\r\n                            <span>{population}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Subregion: </span>\r\n                            <span>{subregion}</span>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            <span className=\"term\">Region: </span>\r\n                            <span>{region}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        country: state.countries.country,\r\n        loading: state.countries.loadingCountry,\r\n        error: state.countries.error\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountry: (country) => dispatch(fetchCountry(country)),\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemDetails);\r\n\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {filterCountryBySubregion} from \"../../redux/actions/Actions\";\r\nimport './ItemFilters.scss';\r\n\r\nclass ItemFilters extends Component{\r\n    render() {\r\n        const {countryFilters, selectedCountryFilter, filterCountryBySubregion} = this.props;\r\n\r\n        const filters = countryFilters.map((filter) => {\r\n            const cls = filter === selectedCountryFilter ? 'btn-info' : 'btn-outline-info';\r\n\r\n            return (\r\n                <button\r\n                    key={filter}\r\n                    type=\"button\"\r\n                    value={filter}\r\n                    className={`btn ${cls}`}\r\n                    onClick={() => filterCountryBySubregion(filter)}\r\n                >\r\n                    {filter}\r\n                </button>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"btn-group mb-5\">\r\n                {filters}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        countryFilters: state.countries.countryFilters,\r\n        selectedCountryFilter: state.countries.selectedCountryFilter\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        filterCountryBySubregion: (filterName) => dispatch(filterCountryBySubregion(filterName))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ItemFilters));","import React from 'react';\r\n\r\nconst ContentRow = ({top, leftSide, rightSide}) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row mb2\">\r\n                <div className=\"col-md-12\">\r\n                    {top}\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {leftSide}\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    {rightSide}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentRow;","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass AfricaPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'africa';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AfricaPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass AmericasPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'americas';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AmericasPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass AsiaPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'asia';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AsiaPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass EuropePage extends Component {\r\n    componentDidMount() {\r\n        const region = 'europe';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EuropePage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemFilters from \"../ItemFilters/ItemFilters\";\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByRegion, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass OceaniaPage extends Component {\r\n    componentDidMount() {\r\n        const region = 'oceania';\r\n        this.props.fetchCountriesByRegion(region);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemFilters/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByRegion: (region) => dispatch(fetchCountriesByRegion(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OceaniaPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchFavoritesCountries, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass FavoriteCountriesPage extends Component {\r\n    componentDidMount() {\r\n        if (this.props.favoriteCountries.length) {\r\n            this.fetchCountries();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n        if (prevState.favoriteCountries.length !== this.props.favoriteCountries.length) {\r\n            this.fetchCountries();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    fetchCountries = () => {\r\n        const favoritesCountriesList = this.props.favoriteCountries.join(';');\r\n        this.props.fetchFavoritesCountries(favoritesCountriesList);\r\n    };\r\n\r\n    render() {\r\n        if (!this.props.favoriteCountries.length) {\r\n            return (\r\n                <div className=\"alert alert-danger w-50 mx-auto my-5\" role=\"alert\">\r\n                    The list of favorites countries is empty. Please add countries to your favorites!\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps() {\r\n    return {\r\n        favoriteCountries: JSON.parse(localStorage.getItem('favoriteCountries'))\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchFavoritesCountries: (region) => dispatch(fetchFavoritesCountries(region)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCountriesPage);\r\n","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {filterCountryByLanguage} from \"../../redux/actions/Actions\";\r\nimport './ItemSelect.scss';\r\n\r\nclass ItemSelect extends Component{\r\n    render() {\r\n        const {languageFilters, selectedlanguageFilter, filterCountryByLanguage} = this.props;\r\n\r\n        const filters = languageFilters.map(filter => {\r\n            return (\r\n                <option\r\n                    key={filter}\r\n                    value={filter}\r\n                >\r\n                    {filter}\r\n                </option>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <form>\r\n                <div className=\"form-group w-50 mb-5\">\r\n                    <select\r\n                        className=\"form-control\"\r\n                        id=\"item-select\"\r\n                        value={selectedlanguageFilter}\r\n                        onChange={(event) => filterCountryByLanguage(event.target.value)}\r\n                    >\r\n                        <option value=\"\" disabled>Select one of the following...</option>\r\n                        {filters}\r\n                    </select>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        languageFilters: state.countries.languageFilters,\r\n        selectedlanguageFilter: state.countries.selectedlanguageFilter\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        filterCountryByLanguage: (filterName) => dispatch(filterCountryByLanguage(filterName))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemSelect);","import React, {Component} from 'react';\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport ItemList from '../ItemList/ItemList';\r\nimport ItemDetails from '../ItemDetails/ItemDetails';\r\nimport ItemSelect from '../ItemSelect/ItemSelect';\r\nimport ContentRow from '../ContentRow/ContentRow';\r\nimport {fetchCountriesByLanguage, resetCountriesData} from \"../../redux/actions/Actions\";\r\n\r\nclass CountriesByLanguagePage extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchCountriesByLanguage();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.resetCountriesData();\r\n    }\r\n\r\n    render() {\r\n        const {history, match} = this.props;\r\n        const {name} = match.params;\r\n\r\n        return (\r\n            <ContentRow\r\n                top={<ItemSelect/>}\r\n                leftSide={<ItemList onItemSelected={(name) => history.push(name)} />}\r\n                rightSide={<ItemDetails itemName={name} />}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return state;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchCountriesByLanguage: (language) => dispatch(fetchCountriesByLanguage(language)),\r\n        resetCountriesData: () => dispatch(resetCountriesData())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesByLanguagePage);\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport ErrorBoundry from \"../ErrorBoundry/ErrorBoundry\";\r\nimport Header from \"../Header/Header\";\r\nimport RandomCountry from \"../RandomCountry/RandomCountry\";\r\nimport {AfricaPage, AmericasPage, AsiaPage, EuropePage, OceaniaPage, CountriesByLanguagePage, FavoriteCountriesPage} from '../Pages';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n    return (\r\n      <>\r\n          <ErrorBoundry>\r\n              <Router>\r\n                  <Header/>\r\n                  <RandomCountry/>\r\n                  <Switch>\r\n                      <Route path=\"/countries/\" exact render={() => <h1 className=\"heading-text text-primary\">Welcome to Countries Application</h1>}/>\r\n                      <Route path=\"/countries/africa/:name?\" component={AfricaPage} />\r\n                      <Route path=\"/countries/americas/:name?\" component={AmericasPage} />\r\n                      <Route path=\"/countries/asia/:name?\" component={AsiaPage} />\r\n                      <Route path=\"/countries/europe/:name?\" component={EuropePage} />\r\n                      <Route path=\"/countries/oceania/:name?\" component={OceaniaPage} />\r\n                      <Route path=\"/countries/countries-by-language/:name?\" component={CountriesByLanguagePage} />\r\n                      <Route path=\"/countries/favorite-countries/:name?\" component={FavoriteCountriesPage} />\r\n                      <Route render={() => <h1 className=\"heading-text text-danger\">404<br/>Page not found</h1>} />\r\n                  </Switch>\r\n              </Router>\r\n          </ErrorBoundry>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {Provider} from 'react-redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport RootReducer from './redux/reducers/RootReducer'\r\nimport App from './components/App/App';\r\nimport './index.scss';\r\n\r\nconst store = createStore(RootReducer, composeWithDevTools(\r\n    applyMiddleware(ReduxThunk),\r\n));\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('countries'));\r\n"],"sourceRoot":""}